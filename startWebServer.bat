:: To use the RiverCrossing.exe generated by MSYS2/Cygwin/MSVC,
:: the server needs to be launched from the same type of environment with the
:: exception of MSVC builds, which can be launched also from MSYS2/Cygwin environments.
:: That is:
:: - RiverCrossing.exe compiled by Cygwin must be launched only from Cygwin
:: - RiverCrossing.exe compiled by MSYS2 must be launched only from MSYS2
:: - RiverCrossing.exe compiled by MSVC can be launched from either of the 3 environments

@echo off

setlocal EnableDelayedExpansion

set serverPath=.\GoServer\cmd\RiverCrossingServer\RiverCrossingServer.exe
set srcName=main.go
set serverSrcPath=.\GoServer\cmd\RiverCrossingServer\%srcName%

:: If the server doesn't exist or is older than the source, (re)build it.
set buildRequired=false

if NOT exist "%serverPath%" (
	echo The Windows version of the server was not found. Building it now ...
	set buildRequired=true

) else (
	for /F %%i in ('dir /B /O:D %serverPath% %serverSrcPath%') do set newestFile=%%i
	if "!newestFile!" == "%srcName%" (
		echo The Windows version of the server is older than its source. Rebuilding it ...
		set buildRequired=true
	)
)

:: All 3 environments (MSYS2/Cygwin/MSVC) should create a single server
:: using the Golang installed in Windows.
if %buildRequired% == true (
	go.exe build -C .\GoServer\cmd\RiverCrossingServer\ -buildvcs=false || (
		@echo Couldn't build the Windows version of the server^!
		exit /B 1)
)

:: Launch the server
"%serverPath%"
